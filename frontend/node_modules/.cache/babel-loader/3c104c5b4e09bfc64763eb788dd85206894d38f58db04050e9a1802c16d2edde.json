{"ast":null,"code":"var _jsxFileName = \"/home/evanio/Documents/School/web/React/record_app/record-app/src/context/AlbumContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlbumContext = /*#__PURE__*/createContext();\nexport const AlbumProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(true);\n  const [album, setAlbum] = useState([]);\n  const [albumEdit, setAlbumEdit] = useState({\n    edit: false,\n    item: {} // album\n  });\n\n  useEffect(() => {\n    fetchAlbum();\n  }, []);\n\n  // fetch album\n  const fetchAlbum = async () => {\n    const res = await fetch('/album?_sort=id&_order=desc');\n    const data = await res.json();\n    setAlbum(data);\n    setIsLoading(false);\n  };\n\n  // add a new album\n  const addAlbum = async newAlbum => {\n    const res = await fetch('/album', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAlbum)\n    });\n    const data = await res.json();\n    setAlbum([data, ...album]);\n  };\n\n  // delete an album\n  const deleteAlbum = async id => {\n    if (window.confirm('Are you sure you want to delete this album?')) {\n      await fetch(`/album/${id}`, {\n        method: 'DELETE'\n      });\n      setAlbum(album.filter(album => album.id !== id));\n    }\n  };\n\n  // update an album\n  const updateAlbum = async (id, updAlbum) => {\n    const res = await fetch(`/album/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updAlbum)\n    });\n    const data = await res.json();\n    setAlbum(album.map(album => album.id === id ? {\n      ...album,\n      ...data\n    } : album));\n\n    // reset albumEdit state\n    setAlbumEdit({\n      item: {},\n      edit: false\n    });\n  };\n\n  // set album to be updated\n  const editAlbum = item => {\n    setAlbumEdit({\n      item,\n      edit: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AlbumContext.Provider, {\n    value: {\n      album,\n      albumEdit,\n      isLoading,\n      deleteAlbum,\n      addAlbum,\n      editAlbum,\n      updateAlbum\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(AlbumProvider, \"fMXX7MEXtjQGqwyqL5l1fZPqNnw=\");\n_c = AlbumProvider;\nexport default AlbumContext;\nvar _c;\n$RefreshReg$(_c, \"AlbumProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","AlbumContext","AlbumProvider","_ref","_s","children","isLoading","setIsLoading","album","setAlbum","albumEdit","setAlbumEdit","edit","item","fetchAlbum","res","fetch","data","json","addAlbum","newAlbum","method","headers","body","JSON","stringify","deleteAlbum","id","window","confirm","filter","updateAlbum","updAlbum","map","editAlbum","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/evanio/Documents/School/web/React/record_app/record-app/src/context/AlbumContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from 'react'\n\nconst AlbumContext = createContext()\n\nexport const AlbumProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [album, setAlbum] = useState([])\n\n  const [albumEdit, setAlbumEdit] = useState({\n    edit: false,\n    item: {}, // album\n  })\n\n  useEffect(() => {\n    fetchAlbum()\n  }, [])\n\n  // fetch album\n  const fetchAlbum = async () => {\n    const res = await fetch('/album?_sort=id&_order=desc')\n    const data = await res.json()\n\n    setAlbum(data)\n    setIsLoading(false)\n  }\n\n  // add a new album\n  const addAlbum = async (newAlbum) => {\n    const res = await fetch('/album', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newAlbum),\n    })\n\n    const data = await res.json()\n\n    setAlbum([data, ...album])\n  }\n\n  // delete an album\n  const deleteAlbum = async (id) => {\n    if (window.confirm('Are you sure you want to delete this album?')) {\n      await fetch(`/album/${id}`, {\n        method: 'DELETE',\n      })\n\n      setAlbum(album.filter((album) => album.id !== id))\n    }\n  }\n\n  // update an album\n  const updateAlbum = async (id, updAlbum) => {\n    const res = await fetch(`/album/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updAlbum),\n    })\n\n    const data = await res.json()\n\n    setAlbum(\n      album.map((album) => (album.id === id ? { ...album, ...data } : album))\n    )\n\n    // reset albumEdit state\n    setAlbumEdit({\n      item: {},\n      edit: false,\n    })\n  }\n\n  // set album to be updated\n  const editAlbum = (item) => {\n    setAlbumEdit({\n      item,\n      edit: true,\n    })\n  }\n\n  return (\n    <AlbumContext.Provider\n      value={{\n        album,\n        albumEdit,\n        isLoading,\n        deleteAlbum,\n        addAlbum,\n        editAlbum,\n        updateAlbum,\n      }}\n    >\n      {children}\n    </AlbumContext.Provider>\n  )\n}\n\nexport default AlbumContext\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}